{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUserName": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password. Pick a complex password with uppercase letters, lowercase letters, digits, and symbols. The password should not be longer than 16. Otherwise you'll get a BadRequest error."
      }
    },
    "metadataNodeSize": {
      "type": "string",
      "defaultValue": "Standard_A4",
      "metadata": {
        "description": "Size of the metadata server node."
      }
    },
    "metadataNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "This template creates N metadata nodes. Use metadataNodeCount to specify that N."
      }
    },
    "metadataDataDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM.  A RAID-0 volume is created with all data disks that is metadataDataDiskSize * dataDiskCount in size."
      }
    },
    "storageNodeSize": {
      "type": "string",
      "defaultValue": "Standard_A4",
      "metadata": {
        "description": "Size of the storage nodes."
      }
    },
    "storageNodeCount": {
      "type": "int",
      "defaultValue": 6,
      "metadata": {
        "description": "This template creates N storage nodes. Use storageNodeCount to specify that N."
      }
    },
    "storageDataDiskSize": {
      "type": "int",
      "defaultValue": 1023,
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM.  A RAID-0 volume is created with all data disks that is storageDataDiskSize * dataDiskCount in size."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Type of storage account to create for disks."
      }
    }
  },
  "variables": {
    "imagePublisher": "OpenLogic",
    "imageOffer": "CentOS",
    "imageSku": "7.2",
    "storageAccountNameMetadataOs": "[concat(uniqueString('metaos', resourceGroup().id), 'sa')]",
    "storageAccountNameMeta0": "[concat(uniqueString('0', 'meta', resourceGroup().id), 'sa')]",
    "storageAccountNameMeta1": "[concat(uniqueString('1', 'meta', resourceGroup().id), 'sa')]",
    "storageAccountNameMeta2": "[concat(uniqueString('2', 'meta', resourceGroup().id), 'sa')]",
    "storageAccountNameMeta3": "[concat(uniqueString('3', 'meta', resourceGroup().id), 'sa')]",
    "storageAccountNameMeta4": "[concat(uniqueString('4', 'meta', resourceGroup().id), 'sa')]",
    "storageAccountNameMeta5": "[concat(uniqueString('5', 'meta', resourceGroup().id), 'sa')]",
    "storageAccountNameStorageOs": "[concat(uniqueString('storageos', resourceGroup().id), 'sa')]",
    "storageAccountName0": "[concat(uniqueString('0', 'storage', resourceGroup().id), 'sa')]",
    "storageAccountName1": "[concat(uniqueString('1', 'storage', resourceGroup().id), 'sa')]",
    "storageAccountName2": "[concat(uniqueString('2', 'storage', resourceGroup().id), 'sa')]",
    "storageAccountName3": "[concat(uniqueString('3', 'storage', resourceGroup().id), 'sa')]",
    "storageAccountName4": "[concat(uniqueString('4', 'storage', resourceGroup().id), 'sa')]",
    "storageAccountName5": "[concat(uniqueString('5', 'storage', resourceGroup().id), 'sa')]",
    "storageAccountName6": "[concat(uniqueString('6', 'storage', resourceGroup().id), 'sa')]",
    "storageAccountName7": "[concat(uniqueString('7', 'storage', resourceGroup().id), 'sa')]",
    "vhdContainerName": "vhd",
    "OSDiskName": "osdisk",
    "publicIPAddressType": "Dynamic",
    "publicIPAddressName": "publicips",
    "metadataVMName": "metadata",
    "storageVMName": "storage",
	"armApiVersion": "2015-06-15",
	"avSetName": "avSet",
    "nicName": "nic",
    "networkSettings": {
      "virtualNetworkName": "virtualnetwork",
      "addressPrefix": "10.0.0.0/16",
      "subnet": {
        "dse": {
          "name": "dse",
          "prefix": "10.0.0.0/24",
          "vnet": "virtualnetwork"
        }
      },
      "statics": {
        "metadataRange": {
          "base": "10.0.0.",
          "start": 5
        },
        "storageRange": {
          "base": "10.0.0.",
          "start": 50
        },
        "master": "10.0.0.254"
      }
    },
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('networkSettings').virtualNetworkName)]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('networkSettings').subnet.dse.name)]",
    "templateBaseUrl": "https://raw.githubusercontent.com/smith1511/hpc/master/beegfs-on-centos7.2/",
    "installationCLI": "[concat('bash azuredeploy.sh ', variables('metadataVMName'), ' ', parameters('metadataNodeCount'), ' ', variables('storageVMName'), ' ', parameters('storageNodeCount'), ' ', variables('templateBaseUrl'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameMetadataOs')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameStorageOs')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameMeta0')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameMeta1')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameMeta2')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameMeta3')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameMeta4')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameMeta5')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName0')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName1')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName2')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName3')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName4')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName5')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName6')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName7')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetName')]",
      "apiVersion": "[variables('armApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('networkSettings').virtualNetworkName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('networkSettings').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('networkSettings').subnet.dse.name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet.dse.prefix]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('armApiVersion')]",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), variables('metadataVMName'), '0')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('networkSettings').statics.metadataRange.base, variables('networkSettings').statics.metadataRange.start)]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), variables('metadataVMName'), copyindex(1))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]"
      ],
      "copy": {
        "name": "foo",
        "count": "[sub(parameters('metadataNodeCount'), 1)]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('networkSettings').statics.metadataRange.base, add(variables('networkSettings').statics.metadataRange.start, copyindex(1)))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), variables('storageVMName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]"
      ],
      "copy": {
        "name": "foo",
        "count": "[parameters('storageNodeCount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('networkSettings').statics.storageRange.base, add(variables('networkSettings').statics.storageRange.start, copyindex()))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('metadataVMName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameMetadataOs'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameMeta0'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameMeta1'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameMeta2'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameMeta3'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameMeta4'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameMeta5'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), variables('metadataVMName'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetName'))]"
      ],
      "copy": {
        "name": "foo",
        "count": "[parameters('metadataNodeCount')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('storageNodeSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('metadataVMName'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountNameMetadataOs'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('OSDiskName'),variables('metadataVMName'),copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "datadisk0",
              "diskSizeGB": "[parameters('metadataDataDiskSize')]",
              "lun": 0,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountNameMeta0'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('metadataVMName'),copyindex(),'-datadisk0.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk1",
              "diskSizeGB": "[parameters('metadataDataDiskSize')]",
              "lun": 1,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountNameMeta1'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('metadataVMName'),copyindex(),'-datadisk1.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk2",
              "diskSizeGB": "[parameters('metadataDataDiskSize')]",
              "lun": 2,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountNameMeta2'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('metadataVMName'),copyindex(),'-datadisk2.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk3",
              "diskSizeGB": "[parameters('metadataDataDiskSize')]",
              "lun": 3,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountNameMeta3'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('metadataVMName'),copyindex(),'-datadisk3.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk4",
              "diskSizeGB": "[parameters('metadataDataDiskSize')]",
              "lun": 4,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountNameMeta4'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('metadataVMName'),copyindex(),'-datadisk4.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk5",
              "diskSizeGB": "[parameters('metadataDataDiskSize')]",
              "lun": 5,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountNameMeta5'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('metadataVMName'),copyindex(),'-datadisk5.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), variables('metadataVMName'), copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('metadataVMName'), copyindex(), '/Installation')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('metadataVMName'), copyindex())]"
      ],
      "copy": {
        "name": "foo",
        "count": "[parameters('metadataNodeCount')]"
      },
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": [
            "[concat(variables('templateBaseUrl'), 'azuredeploy.sh')]"
          ],
          "commandToExecute": "[variables('installationCLI')]"
        }
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('storageVMName'), copyindex(), '/Installation')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
	    "[concat('Microsoft.Compute/virtualMachines/', variables('metadataVMName'), '0', '/extensions/Installation')]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('storageVMName'), copyindex())]"
      ],
      "copy": {
        "name": "foo",
        "count": "[parameters('storageNodeCount')]"
      },
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": [
            "[concat(variables('templateBaseUrl'), 'azuredeploy.sh')]"
          ],
          "commandToExecute": "[variables('installationCLI')]"
        }
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('storageVMName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameStorageOs'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName0'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName1'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName2'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName3'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName4'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName5'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName6'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName7'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), 'storage', copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetName'))]"
      ],
      "copy": {
        "name": "foo",
        "count": "[parameters('storageNodeCount')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('storageNodeSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('storageVMName'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountNameStorageOs'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('OSDiskName'),variables('storageVMName'),copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "datadisk0",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 0,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName0'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk0.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk1",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 1,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName1'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk1.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk2",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 2,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName2'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk2.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk3",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 3,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName3'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk3.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk4",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 4,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName4'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk4.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk5",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 5,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName5'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk5.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk6",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 6,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName6'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk6.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            },
            {
              "name": "datadisk7",
              "diskSizeGB": "[parameters('storageDataDiskSize')]",
              "lun": 7,
              "vhd": {
                "Uri": "[concat('http://',variables('storageAccountName7'),'.blob.core.windows.net/',variables('vhdContainerName'),'/',variables('storageVMName'),copyindex(),'-datadisk7.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), variables('storageVMName'), copyindex()))]"
            }
          ]
        }
      }
    }
  ]
}
