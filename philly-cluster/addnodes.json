{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "adminUserName": {
        "type": "string",
        "defaultValue": "philly",
        "metadata": {
          "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Admin password. Pick a complex password with uppercase letters, lowercase letters, digits, and symbols. The password should not be longer than 16. Otherwise you'll get a BadRequest error."
        }
      },
      "nodeType": {
        "type": "string",
        "defaultValue": "worker",
        "allowedValues": [
          "worker",
          "gluster",
          "file transfer",
          "auxiliary"
        ],
        "metadata": {
          "description": "type of node"
        }
      },
      "nodePrefix": {
          "type": "string",
          "defaultValue": "pworker",
          "metadata": {
            "description": "Prefix of node. Use gfs-vm or gfshot-vm for gluster type, please."
          }
      },
      "nodeSize": {
        "type": "string",
        "defaultValue": "Standard_NC24rs_v2",
        "allowedValues": [
          "Standard_D12",
          "Standard_D12_v2",
          "Standard_D13_v2",
          "Standard_D14_v2",
          "Standard_D15_v2",
          "Standard_DS5_V2",
          "Standard_DS12_v2",
          "Standard_NC6",
          "Standard_NC12",
          "Standard_NC24",
          "Standard_NC24r",
          "Standard_NC6s_v2",
          "Standard_NC12s_v2",
          "Standard_NC24s_v2",
          "Standard_NC24rs_v2"
        ],
        "metadata": {
          "description": "Size of the nodes."
        }
      },
      "nodeCount": {
        "type": "int",
        "defaultValue": 3,
        "minValue": 1,
        "maxValue": 100,
        "metadata": {
          "description": "Specify the number of nodes."
        }
      },
      "startIndex": {
        "type": "int",
        "defaultValue": 50,
        "metadata": {
          "description": "Specify the starting index for this set of nodes."
        }
      },
      "subnetIpBase": {
        "type": "string",
        "defaultValue": "10.0.8",
        "metadata": {
            "description": "This is ignore for type worker. The subnet IP base for nodes."
        }
      },
      "subnetIPOffset":{
        "type": "int",
        "defaultValue": 5,
        "metadata": {
            "description": "E.g., an offset of 5 with IP Base 10.0.8 means the first VM will start at 10.0.8.5."
        }
      },
      "nodeDataDiskCount": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
            "description": "This number of data disk attached to a node."
        }
      },
      "nodeDataDiskSize": {
        "type": "int",
        "defaultValue": 1023,
        "metadata": {
            "description": "Size of each data disk."
        }
      },
      "OSImage": {
        "type": "string",
        "defaultValue": "provide_your_image_id_string",
        "metadata": {
          "description": "Image to use for all instances of the infrastructure nodes."
        }
      },
      "loadBalancerIP": {
        "type": "string",
        "defaultValue": "10.0.0.4",
        "metadata": {
          "description": "Provide IP address of load balancer for pulling config."
          }
      },
      "avSet": {
        "type": "string",
        "defaultValue": "existing_avSet",
        "metadata": {
          "description": "Provide an existing resource id for an availability set."
        }
      },
      "subnet": {
        "type": "string",
        "defaultValue": "existing_vnet_subnet",
        "metadata": {
          "description": "Provide an existing resource id for a subnet."
          }
      }
    },
    "variables": {
      "nicName": "[concat('nic-',parameters('nodePrefix'))]",
      "offset":"[parameters('subnetIPOffset')]",
      "maxNodeIP":240,
      "effectiveIndex": "[add(parameters('startIndex'),variables('offset'))]",
      "thirdOctet1": "[div(variables('effectiveIndex'),240)]",
      "thirdOctet2": "[add(variables('thirdOctet1'),1)]",
      "overflow": "[if(greaterOrEquals(add(variables('effectiveIndex'),parameters('nodeCount')),variables('maxNodeIP')), 1, 0)]",
      "beginIPIndex":"[mod(variables('effectiveIndex'),variables('maxNodeIP'))]",
      "ipbase":"[if(equals(parameters('nodeType'),'worker'),concat('10.0.',variables('thirdOctet1')),parameters('subnetIpBase'))]",
      "firstCount":"[if(equals(variables('overflow'),0),parameters('nodeCount'),sub(variables('maxNodeIP'),variables('beginIPIndex')))]",
      "secondStartIndex":"[add(parameters('startIndex'),variables('firstCount'))]",
      "secondCount":"[if(equals(variables('overflow'),0),1,sub(parameters('nodeCount'),variables('firstCount')))]",
      "commonBootstrapLink":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/common.sh",
      "workerBootstrapLink":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/workerdeploy.sh",
      "gfsBootstrapLink":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/glusterfs_bootstrap.sh",
      "gfsFSLink": "https://raw.githubusercontent.com/Azure/batch-shipyard/3.0.3/scripts/shipyard_remotefs_bootstrap.sh",
      "glusterscripts": [
        "[variables('commonBootstrapLink')]",
        "[variables('gfsFSLink')]",
        "[variables('gfsBootstrapLink')]"
      ],
      "workerscripts": [
        "[variables('commonBootstrapLink')]",
        "[variables('workerBootstrapLink')]"
      ],
      "workerCmd": "[concat('bash workerdeploy.sh ', parameters('loadBalancerIP'), ' ', parameters('adminUserName'), ' ', parameters('nodeSize'))]",
      "glusterCmd": "[concat('./glusterfs_bootstrap.sh ', parameters('loadBalancerIP'), ' ', parameters('adminUserName'), ' ', parameters('nodePrefix'), ' ',  parameters('subnetIpBase'), ' ', variables('offset'), ' ', parameters('nodeCount'))]",
      "glusterAVSet":"gfsAvSet",
      "nodeAvSet":"[if(equals(parameters('nodeType'),'gluster'),resourceId('Microsoft.Compute/availabilitySets', variables('glusterAvSet')),parameters('avSet'))]"
    },
    "resources": [
      {
        "type": "Microsoft.Compute/availabilitySets",
        "condition":"[equals(parameters('nodeType'), 'gluster')]",
        "name": "[variables('glusterAVSet')]",
        "apiVersion": "2017-03-30",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Aligned"
        },
        "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 8
        }
      },
      {
        "apiVersion": "2017-06-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('nicName'), if(less(copyindex(parameters('startIndex')),10),'000',if(less(copyindex(parameters('startIndex')),100),'00','0')), copyindex(parameters('startIndex')))]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "nodeNicCopy1",
          "count": "[variables('firstCount')]"
        },
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[concat(variables('ipbase'), '.', copyindex(variables('beginIPIndex')))]",
                "subnet": {
                  "id": "[parameters('subnet')]"
                }
              }
            }
          ],
          "enableAcceleratedNetworking":true
        }
      },
      {
        "apiVersion": "2017-03-30",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(parameters('nodePrefix'), if(less(copyindex(parameters('startIndex')),10),'000',if(less(copyindex(parameters('startIndex')),100),'00','0')), copyindex(parameters('startIndex')))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), if(less(copyindex(parameters('startIndex')),10),'000',if(less(copyindex(parameters('startIndex')),100),'00','0')), copyindex(parameters('startIndex')))]"
        ],
        "copy": {
          "name": "workerVMCopy1",
          "count": "[variables('firstCount')]"
        },
        "properties": {
          "availabilitySet": {
            "id": "[variables('nodeAvSet')]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('nodeSize')]"
          },
          "osProfile": {
            "computername": "[concat(parameters('nodePrefix'), if(less(copyindex(parameters('startIndex')),10),'000',if(less(copyindex(parameters('startIndex')),100),'00','0')), copyindex(parameters('startIndex')))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
              "id": "[parameters('OSImage')]"
            },
            "osDisk": {
              "createOption": "FromImage",
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
                {
                    "name": "dataDisks",
                    "count": "[parameters('nodeDataDiskCount')]",
                    "input": {
                        "name": "[concat(concat(parameters('nodePrefix'), if(greater(copyIndex(parameters('startIndex')),9),'-0','-00'), copyIndex(parameters('startIndex'))), '-disk', copyIndex('dataDisks'))]",
                        "lun": "[copyIndex('dataDisks')]",
                        "diskSizeGB": "[parameters('nodeDataDiskSize')]",
                        "caching": "ReadOnly",
                        "createOption": "Empty",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                          }
                    }
                }
            ]                 
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), if(less(copyindex(parameters('startIndex')),10),'000',if(less(copyindex(parameters('startIndex')),100),'00','0')), copyindex(parameters('startIndex'))))]"
              }
            ]
          }
        }
      },
      {
        "apiVersion": "2017-03-30",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(parameters('nodePrefix'), if(less(copyindex(parameters('startIndex')),10),'000',if(less(copyindex(parameters('startIndex')),100),'00','0')), copyindex(parameters('startIndex')), '/Installation')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', parameters('nodePrefix'), if(less(copyindex(parameters('startIndex')),10),'000',if(less(copyindex(parameters('startIndex')),100),'00','0')), copyindex(parameters('startIndex')))]"
        ],
        "copy": {
          "name": "nodeExtCopy1",
          "count": "[variables('firstCount')]"
        },
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[if(equals(parameters('nodeType'),'gluster'),variables('glusterscripts'),variables('workerscripts'))]",
            "commandToExecute": "[if(equals(parameters('nodeType'),'gluster'),variables('glusterCmd'), variables('workerCmd'))]"
          }
        }
      },
      {
        "apiVersion": "2017-06-01",
        "condition": "[equals(variables('overflow'),1)]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('nicName'),  if(less(copyindex(variables('secondStartIndex')),10),'000',if(less(copyindex(variables('secondStartIndex')),100),'00','0')), copyindex(variables('secondStartIndex')))]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "nodeNicCopy2",
          "count": "[variables('secondCount')]"
        },
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[concat('10.0.', variables('thirdOctet2'), '.', copyindex())]",
                "subnet": {
                  "id": "[parameters('subnet')]"
                }
              }
            }
          ],
          "enableAcceleratedNetworking":true
        }
      },
      {
        "apiVersion": "2017-03-30",
        "condition": "[equals(variables('overflow'),1)]",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(parameters('nodePrefix'), if(less(copyindex(variables('secondStartIndex')),10),'000',if(less(copyindex(variables('secondStartIndex')),100),'00','0')), copyindex(variables('secondStartIndex')))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), if(less(copyindex(variables('secondStartIndex')),10),'000',if(less(copyindex(variables('secondStartIndex')),100),'00','0')), copyindex(variables('secondStartIndex')))]"
        ],
        "copy": {
          "name": "nodeVMCopy2",
          "count": "[variables('secondCount')]"
        },
        "properties": {
          "availabilitySet": {
            "id": "[variables('nodeAvSet')]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('nodeSize')]"
          },
          "osProfile": {
            "computername": "[concat(parameters('nodePrefix'), if(less(copyindex(variables('secondStartIndex')),10),'000',if(less(copyindex(variables('secondStartIndex')),100),'00','0')), copyindex(variables('secondStartIndex')))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
              "id": "[parameters('OSImage')]"
            },
            "osDisk": {
              "createOption": "FromImage",
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
                {
                    "name": "dataDisksw",
                    "count": "[parameters('nodeDataDiskCount')]",
                    "input": {
                        "name": "[concat(concat(parameters('nodePrefix'), if(greater(copyIndex(variables('secondStartIndex')),9),'-0','-00'), copyIndex(variables('secondStartIndex'))), '-disk', copyIndex('dataDisksw'))]",
                        "lun": "[copyIndex('dataDisks')]",
                        "diskSizeGB": "[parameters('nodeDataDiskSize')]",
                        "caching": "ReadOnly",
                        "createOption": "Empty",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                          }
                    }
                }
            ]                      
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), if(less(copyindex(variables('secondStartIndex')),10),'000',if(less(copyindex(variables('secondStartIndex')),100),'00','0')), copyindex(variables('secondStartIndex'))))]"
              }
            ]
          }
        }
      },
      {
        "apiVersion": "2017-03-30",
        "condition": "[equals(variables('overflow'),1)]",      
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(parameters('nodePrefix'), if(less(copyindex(variables('secondStartIndex')),10),'000',if(less(copyindex(variables('secondStartIndex')),100),'00','0')),copyindex(variables('secondStartIndex')), '/Installation')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', parameters('nodePrefix'), if(less(copyindex(variables('secondStartIndex')),10),'000',if(less(copyindex(variables('secondStartIndex')),100),'00','0')), copyindex(variables('secondStartIndex')))]"
        ],
        "copy": {
          "name": "nodeExtCopy2",
          "count": "[variables('secondCount')]"
        },
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('workerscripts')]",
            "commandToExecute": "[variables('workerCmd')]"
          }
        }
      }
    ]
  }
  
