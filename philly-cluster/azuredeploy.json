{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUserName": {
      "type": "string",
      "defaultValue": "philly",
      "metadata": {
        "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password. Pick a complex password with uppercase letters, lowercase letters, digits, and symbols. The password should not be longer than 16. Otherwise you'll get a BadRequest error."
      }
    },
    "infraNodeSize": {
      "type": "string",
      "defaultValue": "Standard_E32S_V3",
      "allowedValues": [
        "Standard_E32S_V3",
        "Standard_DS5_V2",        
        "Standard_DS15_v2",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_NC6",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6s_v2",
        "Standard_NC12s_v2",
        "Standard_NC24s_v2",
        "Standard_NC24rs_v2"
      ],
      "metadata": {
        "description": "Size of the infrastructure node."
      }
    },
    "infraNodeCount": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 0,
      "maxValue": 10,
      "metadata": {
        "description": "Specify the number of infrastructure nodes"
      }
    },
    "workerResourceGroup":{
      "type": "string",
      "defaultValue": "WorkerResourceGroup",
      "metadata": {
        "description": "Provide RG for worker. This has to be the same one with the worker AV Set"
      }
    },
    "workerAVSet": {
      "type": "string",
      "defaultValue": "existing_avSet",
      "metadata": {
        "description": "Provide an existing pinned availability set for worker."
      }
    },
    "workerNodeSize": {
      "type": "string",
      "defaultValue": "Standard_NC24rs_v2",
      "allowedValues": [
        "Standard_DS12",
        "Standard_NC6",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6s_v2",
        "Standard_NC12s_v2",
        "Standard_NC24s_v2",
        "Standard_NC24rs_v2"
      ],
      "metadata": {
        "description": "Size of the worker nodes."
      }
    },
    "workerNodeCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 0,
      "maxValue": 100,
      "metadata": {
        "description": "Specify the number of worker nodes."
      }
    },
    "gfsResourceGroup": {
      "type": "string",
      "defaultValue": "GFSResourceGroup",
      "metadata": {
          "description": "Provide RG for gluster and FTS"
      }
    },
    "gfsNodeSize": {
      "type": "string",
      "defaultValue": "Standard_D12",
      "allowedValues": [
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_DS5_V2",
        "Standard_DS12"
      ],
      "metadata": {
        "description": "Size of the gluster nodes."
      }
    },
    "gfsNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 0,
      "metadata": {
        "description": "Specify the number of auxiliary nodes."
      }
    },
    "gfsDataDiskCount": {
      "type": "int",
      "defaultValue": "25",
      "metadata": {
          "description": "This number of data disk attached to a gluster node."
      }
    },
    "gfsDataDiskSize": {
      "type": "int",
      "defaultValue": 4095,
      "metadata": {
          "description": "Size of each data disk in gluster nodes."
      }
    },
    "OSImage": {
      "type": "string",
      "defaultValue": "provide_your_image_id_string",
      "metadata": {
        "description": "Image to use for all instances of the infrastructure nodes."
      }
    },
    "virtualnetworkID":{
      "type": "string",
      "defaultValue": "create_new",
      "metadata": {
        "description": "provide an existing vnet or create a new one. worker and infra will be deployed to core subnet, hot storage to gfshot, warm to gfswarm, file transfer to fts"
      }
    },
    "clusterYml": {
      "type": "string",
      "defaultValue": "none",
      "metadata": {
        "description": "Provide a link to your cluster yml file."
      }
    },
    "cloudconfigYml": {
      "type": "string",
      "defaultValue": "none",
      "metadata": {
        "description": "Provide a link to your cloud config template yml file."
      }
    },
    "clusterId": {
      "type": "string",
      "defaultValue": "sc1",
      "minLength": 3,
      "maxLength": 3,
      "metadata": {
        "description": "Provide a cluster id."
        }
    }
  },
  "variables": {
    "publicIPAddressType": "Dynamic",
    "publicIPAddressName": "publicips",
    "infraVMName": "pinfra",
    "workerVMName": "pworker",
    "gfsName": "gfs",
    "ftsName": "fts",
    "avSetName": "infraAVSet",
    "nicName": "nic-",
    "networkSettings": {
      "virtualNetworkName": "virtualnetwork",
      "addressPrefix": "10.0.0.0/16",
      "subnet": {
        "core": {
          "name": "core",
          "prefix": "10.0.0.0/22",
          "vnet": "virtualnetwork"
        },
        "gfs": {
          "name": "gfshot",
          "prefix": "10.0.14.0/24",
          "vnet": "virtualnetwork"
        },
        "fts": {
          "name": "fts",
          "prefix": "10.0.15.0/24",
          "vnet": "virtualnetwork"
        }
      },
      "statics": {
        "workerRange": {
          "base": "10.0.0",
          "start": 5
        },
        "gfsRange": {
          "base": "10.0.14",
          "start": 4
        },
        "ftsRange": {
          "base": "10.0.15",
          "start": 4
        },
        "infraRange": {
          "base": "10.0.1",
          "start": 240
        },
        "lbIP": "10.0.0.4"
      }
    },
    "infraCount":"[if(greater(parameters('infraNodeCount'),0),parameters('infraNodeCount'), 1)]",
    "externalLBIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses','publicIPExternalLB')]",
    "internalLBName":"internalLoadBalancer",
    "internalLBID": "[resourceId('Microsoft.Network/loadBalancers',variables('internalLBName'))]",
    "externalLBName":"externalLoadBalander",
    "externalLBID": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLBName'))]",
    "vnetID": "[if(equals(parameters('virtualnetworkID'),'create_new'),resourceId('Microsoft.Network/virtualNetworks',variables('networkSettings').virtualNetworkName),parameters('virtualnetworkID'))]",
    "coreSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('networkSettings').subnet.core.name)]",
    "gfsSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('networkSettings').subnet.gfs.name)]",
    "ftsSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('networkSettings').subnet.fts.name)]",
    "templateBaseUrl": "https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/availabilitySets",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "name": "[variables('avSetName')]",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 8
      }
    },
    {
      "apiVersion": "2017-06-01",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "publicIPExternalLB",
      "location": "[resourceGroup().location]",
      "properties": {
          "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "2017-10-01",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('externalLBName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]",
        "[variables('externalLBIPAddressID')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
            {
                "name": "LoadBalancerFrontEnd",
                "properties": {
                    "publicIPAddress": {
                        "id": "[variables('externalLBIPAddressID')]"
                    }
                }
            }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/httpprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            },
            "Name": "httplbrule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/etcd4001probe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4001,
              "backendPort": 4001,
              "idleTimeoutInMinutes": 15
            },
            "Name": "etcd4001"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "httpprobe"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 4001,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "etcd4001probe"
          }
        ]
      }
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Network/loadBalancers",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "name": "[variables('internalLBName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('coreSubnetRef')]"
              },
              "privateIPAddress": "[variables('networkSettings').statics.lbIP]",
              "privateIPAllocationMethod": "Static"
            },
            "name": "LoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/probes/httpprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            },
            "Name": "httplbrule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/probes/etcd4001probe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4001,
              "backendPort": 4001,
              "idleTimeoutInMinutes": 15
            },
            "Name": "etcd4001"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/probes/dns53probe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 53,
              "backendPort": 53,
              "idleTimeoutInMinutes": 15
            },
            "Name": "dns53"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/probes/dns53probe')]"
              },
              "protocol": "Udp",
              "frontendPort": 53,
              "backendPort": 53,
              "idleTimeoutInMinutes": 15
            },
            "Name": "dns53Udp"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "httpprobe"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 4001,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "etcd4001probe"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 53,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "dns53probe"
          }
        ]
      }
    },
    {
      "apiVersion": "2017-06-01",
      "type": "Microsoft.Network/virtualNetworks",
      "condition":"[equals(parameters('virtualnetworkID'),'create_new')]",
      "name": "[variables('networkSettings').virtualNetworkName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('networkSettings').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('networkSettings').subnet.core.name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet.core.prefix]"
            }
          },
          {
            "name": "[variables('networkSettings').subnet.gfs.name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet.gfs.prefix]"
            }
          },
          {
            "name": "[variables('networkSettings').subnet.fts.name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet.fts.prefix]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "apiVersion": "2017-06-01",
      "name": "[concat(variables('publicIPAddressName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "publicIPCopy",
        "count": "[variables('infraCount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "nsg",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefixes":["131.107.0.0/16"],
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "ETCD",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefixes":["131.107.0.0/16"],
              "destinationPortRange": "4001",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "HTTPS",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefixes":["131.107.0.0/16"],
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "HTTP",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefixes":["131.107.0.0/16"],
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          },
          {
            "name": "HRM",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefixes":["131.107.0.0/16"],
              "destinationPortRange": "8088",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 104,
              "direction": "Inbound"
            }
          },
          {
            "name": "HNN",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefixes":["131.107.0.0/16"],
              "destinationPortRange": "50070",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Inbound"
            }
          },
          {
            "name": "Proxy",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefixes":["131.107.0.0/16"],
              "destinationPortRange": "81",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 106,
              "direction": "Inbound"
            }
          }
        ]
      },
      "dependsOn": []
    },
    {
      "apiVersion": "2017-06-01",
      "type": "Microsoft.Network/networkInterfaces",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "name": "[concat(variables('nicName'),'infra', copyindex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'),copyindex())]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]",
        "[concat('Microsoft.Network/loadBalancers/', variables('internalLBName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('externalLBName'))]",
        "Microsoft.Network/networkSecurityGroups/nsg"
      ],
      "copy": {
        "name": "infraNetworkCopy",
        "count": "[variables('infraCount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('networkSettings').statics.infraRange.base, '.', copyindex(variables('networkSettings').statics.infraRange.start))]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), copyindex()))]"
              },
              "subnet": {
                "id": "[variables('coreSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('internalLBID'), '/backendAddressPools/BackendPool1')]"
                },
                {
                  "id": "[concat(variables('externalLBID'), '/backendAddressPools/BackendPool1')]"
                }
              ]
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg')]"
        },
        "enableAcceleratedNetworking":true
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "name": "[concat(variables('infraVMName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), 'infra', copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetName'))]"
      ],
      "copy": {
        "name": "infraVMCopy",
        "count": "[variables('infraCount')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('infraNodeSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('infraVMName'),copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[parameters('OSImage')]"
          },
          "osDisk": {
            "createOption": "FromImage",
            "diskSizeGB": 1023,
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]                   
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), 'infra', copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition":"[greater(parameters('infraNodeCount'),0)]",
      "name": "[concat(variables('infraVMName'), copyindex(), '/Installation')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "infraVMCopy"
      ],
      "copy": {
        "name": "infraExtCopy",
        "count": "[variables('infraCount')]"
      },
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(variables('templateBaseUrl'), 'infradeploy.sh')]"
          ],
          "commandToExecute": "[concat('bash infradeploy.sh ', variables('networkSettings').statics.lbIP, ' ', parameters('adminUserName'), ' ', variables('infraVMName'), ' ', parameters('infraNodeCount'),  ' ', variables('networkSettings').statics.infraRange.base, '. ', variables('networkSettings').statics.infraRange.start, ' ', variables('workerVMName'), ' ', parameters('workerNodeCount'), ' ', variables('networkSettings').statics.workerRange.base, '. ', variables('networkSettings').statics.workerRange.start, ' ', variables('gfsName'), ' ', parameters('gfsNodeCount'), ' ', variables('networkSettings').statics.gfsRange.base, '. ', variables('networkSettings').statics.gfsRange.start, ' ', parameters('infraNodeSize'), ' ', parameters('workerNodeSize'), ' ', parameters('gfsNodeSize'), ' ', parameters('clusteryml'), ' ', parameters('cloudconfigYml'), ' ', parameters('clusterId'))]"
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "nestedTemplateGfs",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "infraExtCopy"
      ],
      "resourceGroup": "[parameters('gfsResourceGRoup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
            "uri":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/addnodes.json",
            "contentVersion":"1.0.0.0"
        },
        "parameters": {
            "adminUserName":{"value": "[parameters('adminUserName')]"},
            "adminPassword":{"value": "[parameters('adminPassword')]"},
            "nodeType":{"value":"gluster"},
            "nodePrefix":{"value": "[variables('gfsName')]"},
            "nodeSize":{"value": "[parameters('gfsNodeSize')]"},
            "nodeCount":{"value": "[parameters('gfsNodeCount')]"},
            "startIndex":{"value": "0"},
            "subnetIpBase":{"value": "[variables('networkSettings').statics.gfsRange.base]"},
            "subnetIpOffset":{"value": "variables('networkSettings').statics.gfsRange.start"},
            "nodeDataDiskCount":{"value": "[parameters('gfsDataDiskCount')]"},
            "nodeDataDiskSize":{"value": "[parameters('gfsDataDiskSize')]"},
            "OSImage":{"value": "[parameters('OSImage')]"},
            "loadBalancerIP":{"value": "[variables('networkSettings').statics.lbIP]"},
            "avSet":{"value":"[parameters('workerAVSet')]"},
            "subnet":{"value": "[variables('gfsSubnetRef')]"}
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "nestedTemplateWorker",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "nestedTemplateGfs"
      ],
      "resourceGroup": "[parameters('workerResourceGRoup')]",
      "properties": {
          "mode": "Incremental",
          "templateLink": {
              "uri":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/addnodes.json",
              "contentVersion":"1.0.0.0"
          },
          "parameters": {
            "adminUserName":{"value": "[parameters('adminUserName')]"},
            "adminPassword":{"value": "[parameters('adminPassword')]"},
            "nodeType":{"value":"worker"},
            "nodePrefix":{"value": "[variables('workerVMName')]"},
            "nodeSize":{"value": "[parameters('workerNodeSize')]"},
            "nodeCount":{"value": "[parameters('workerNodeCount')]"},
            "startIndex":{"value": "0"},
            "subnetIpBase":{"value": "[variables('networkSettings').statics.workerRange.base]"},
            "subnetIpOffset":{"value": "variables('networkSettings').statics.workerRange.start"},
            "nodeDataDiskCount":{"value": "1"},
            "nodeDataDiskSize":{"value": "1023"},
            "OSImage":{"value": "[parameters('OSImage')]"},
            "loadBalancerIP":{"value": "[variables('networkSettings').statics.lbIP]"},
            "avSet":{"value":"[parameters('workerAVSet')]"},
            "subnet":{"value": "[variables('coreSubnetRef')]"}
        }
      }
    }
  ]
}
