{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "adminUserName": {
        "type": "string",
        "defaultValue": "philly",
        "metadata": {
          "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Admin password. Pick a complex password with uppercase letters, lowercase letters, digits, and symbols. The password should not be longer than 16. Otherwise you'll get a BadRequest error."
        }
      },
      "nodeType": {
        "type": "string",
        "defaultValue": "worker",
        "allowedValues": [
          "worker",
          "gluster",
          "fileTransfer",
          "proxy",
          "auxiliary"
        ],
        "metadata": {
          "description": "type of node"
        }
      },
      "nodePrefix": {
          "type": "string",
          "defaultValue": "pworker",
          "metadata": {
            "description": "Prefix of node. Use gfs for gluster type, please."
          }
      },
      "nodeSize": {
        "type": "string",
        "defaultValue": "Standard_NC24rs_v2",
        "allowedValues": [
          "Standard_DS5_V2",
          "Standard_DS12_v2",
          "Standard_F16s",
          "Standard_NC6s_v2",
          "Standard_NC24rs_v2",
          "Standard_NC24rs_v3",
          "Standard_ND24rs"
        ],
        "metadata": {
          "description": "Size of the nodes."
        }
      },
      "nodeCount": {
        "type": "int",
        "defaultValue": 3,
        "minValue": 1,
        "maxValue": 100,
        "metadata": {
          "description": "Specify the number of nodes."
        }
      },
      "startIndex": {
        "type": "int",
        "defaultValue": 50,
        "metadata": {
          "description": "Specify the starting index for this set of nodes."
        }
      },
      "subnetIpBase": {
        "type": "string",
        "defaultValue": "10.0.8",
        "metadata": {
            "description": "This is ignore for type worker. The subnet IP base for nodes."
        }
      },
      "subnetIPOffset":{
        "type": "int",
        "defaultValue": 5,
        "metadata": {
            "description": "E.g., an offset of 5 with IP Base 10.0.8 means the first VM will start at 10.0.8.5."
        }
      },
      "nodeMaxIP":{
        "type": "int",
        "defaultValue": 239,
        "metadata": {
          "description": "E.g., a max IP off 239 means no worker will have the last IP octet more than 239"
        }
      },
      "nodeDataDiskCount": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
            "description": "This number of data disk attached to a node."
        }
      },
      "nodeDataDiskSize": {
        "type": "int",
        "defaultValue": 1023,
        "metadata": {
            "description": "Size of each data disk."
        }
      },
      "OSImage": {
        "type": "string",
        "defaultValue": "provide_your_image_id_string",
        "metadata": {
          "description": "Image to use for all instances of the infrastructure nodes."
        }
      },
      "loadBalancerIP": {
        "type": "string",
        "defaultValue": "10.0.0.4",
        "metadata": {
          "description": "Provide IP address of load balancer for pulling config. Providing 'none' means cloud config will not be applied"
          }
      },
      "avSet": {
        "type": "string",
        "defaultValue": "create_new",
        "metadata": {
          "description": "Provide an existing resource id for an availability set or create a new one."
        }
      },
      "subnet": {
        "type": "string",
        "defaultValue": "existing_vnet_subnet",
        "metadata": {
          "description": "Provide an existing resource id for a subnet."
          }
      },
      "incremental": {
        "type": "int",
        "defaultValue": 0,
        "metadata": {
          "description": "If adding existing nodes for fileTransfers and gluster, set to 1. For fts provide fts lb below"
          }
      },
      "externalFTSLB":{
        "type": "string",
        "defaultValue": "create_new",
        "metadata": {
          "description": "Provide the existing resource id for the FTS LB."
        }
      }
    },
    "variables": {
      "publicIPAddressType": "Dynamic",
      "publicIPAddressName": "publicips",
      "externalLBIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses','publicIPExternalLB')]",
      "externalLBName":"ftsExternalLoadBalancer",
      "ftslb":"[if(equals(parameters('externalFTSLB'),'create_new'),resourceId('Microsoft.Compute/loadBalancers', variables('externalLBName')),parameters('externalFTSLB'))]",
      "nicName": "[concat('nic-',parameters('nodePrefix'))]",
      "offset":"[parameters('subnetIPOffset')]",
      "upperBoundIP":"[add(parameters('nodeMaxIP'),1)]",
      "effectiveIndex": "[add(parameters('startIndex'),variables('offset'))]",
      "thirdOctet1": "[div(variables('effectiveIndex'),240)]",
      "thirdOctet2": "[add(variables('thirdOctet1'),1)]",
      "beginIPIndex":"[mod(variables('effectiveIndex'),variables('upperBoundIP'))]",
      "overflow": "[if(greaterOrEquals(add(variables('beginIPIndex'),parameters('nodeCount')),variables('upperBoundIP')), 1, 0)]",
      "ipbase":"[if(equals(parameters('nodeType'),'worker'),concat('10.0.',variables('thirdOctet1')),parameters('subnetIpBase'))]",
      "firstCount":"[if(equals(variables('overflow'),0),parameters('nodeCount'),sub(variables('upperBoundIP'),variables('beginIPIndex')))]",
      "secondStartIndex":"[add(parameters('startIndex'),variables('firstCount'))]",
      "secondCount":"[if(equals(variables('overflow'),0),1,sub(parameters('nodeCount'),variables('firstCount')))]",
      "commonBootstrapLink":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/common.sh",
      "workerBootstrapLink":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/workerdeploy.sh",
      "gfsBootstrapLink":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/glusterfs_bootstrap.sh",
      "gfsSetupLink":"https://raw.githubusercontent.com/anhvoms/hpc/master/philly-cluster/glusterfs_setup.sh",
      "glusterscripts": [
        "[variables('commonBootstrapLink')]",
        "[variables('gfsSetupLink')]",
        "[variables('gfsBootstrapLink')]"
      ],
      "workerscripts": [
        "[variables('commonBootstrapLink')]",
        "[variables('workerBootstrapLink')]"
      ],
      "workerCmd": "[concat('bash workerdeploy.sh ', parameters('loadBalancerIP'), ' ', parameters('adminUserName'), ' ', parameters('nodeSize'))]",
      "glusterCmd": "[concat('./glusterfs_bootstrap.sh ', parameters('loadBalancerIP'), ' ', parameters('adminUserName'), ' ', parameters('nodePrefix'), ' ',  parameters('subnetIpBase'), ' ', variables('offset'), ' ', parameters('nodeCount'), ' ', parameters('incremental'))]",
      "nodeAVSetName":"[concat(parameters('nodeType'), 'AvSet')]",
      "nodeAvSet":"[if(equals(parameters('avSet'),'create_new'),resourceId('Microsoft.Compute/availabilitySets', variables('nodeAVSetName')),parameters('avSet'))]",
      "paddedLength":"[if(equals(parameters('nodeType'), 'worker'),4,3)]"
    },
    "resources": [
      {
        "type": "Microsoft.Compute/availabilitySets",
        "condition":"[and(equals(parameters('incremental'),0),equals(parameters('avSet'),'create_new'))]",
        "name": "[variables('nodeAVSetName')]",
        "apiVersion": "2017-03-30",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Aligned"
        },
        "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 8
        }
      },
      {
        "apiVersion": "2017-06-01",
        "condition":"[and(equals(parameters('nodeType'),'fileTransfer'),equals(parameters('incremental'),0))]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "publicIPExternalLB",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
        }
      },
      {
        "apiVersion": "2017-10-01",
        "condition":"[and(equals(parameters('nodeType'),'fileTransfer'),equals(parameters('incremental'),0))]",
        "type": "Microsoft.Network/loadBalancers",
        "name": "[variables('externalLBName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('externalLBIPAddressID')]"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "LoadBalancerFrontEnd",
              "properties": {
                "publicIPAddress": {
                  "id": "[variables('externalLBIPAddressID')]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "ftspool"
            }
          ],
          "loadBalancingRules": [
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
                },
                "backendAddressPool": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/ftspool')]"
                },
                "probe": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/httpsprobe')]"
                },
                "protocol": "Tcp",
                "frontendPort": 443,
                "backendPort": 443,
                "idleTimeoutInMinutes": 15,
                "loadDistribution":"SourceIPProtocol"
              },
              "Name": "https"
            },
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
                },
                "backendAddressPool": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/ftspool')]"
                },
                "probe": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/sshprobe')]"
                },
                "protocol": "Tcp",
                "frontendPort": 22,
                "backendPort": 22,
                "idleTimeoutInMinutes": 15
              },
              "Name": "ssh"
            },
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
                },
                "backendAddressPool": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/ftspool')]"
                },
                "probe": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/sshproxyprobe')]"
                },
                "protocol": "Tcp",
                "frontendPort": 2200,
                "backendPort": 2200,
                "idleTimeoutInMinutes": 15
              },
              "Name": "sshproxy"
            }
          ],
          "probes": [
            {
              "properties": {
                "protocol": "Tcp",
                "port": 443,
                "intervalInSeconds": 15,
                "numberOfProbes": 2
              },
              "name": "httpsprobe"
            },
            {
              "properties": {
                "protocol": "Tcp",
                "port": 22,
                "intervalInSeconds": 15,
                "numberOfProbes": 2
              },
              "name": "sshprobe"
            },
            {
              "properties": {
                "protocol": "Tcp",
                "port": 2200,
                "intervalInSeconds": 15,
                "numberOfProbes": 2
              },
              "name": "sshproxyprobe"
            }
          ]
        }
      },
      {
        "apiVersion": "2017-06-01",
        "condition":"[equals(parameters('nodeType'),'fileTransfer')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[if(equals(parameters('nodeType'),'fileTransfer'), concat(variables('nicName'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0')), concat(variables('nicName'), '-', padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0')))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('externalLBName')]"
        ],
        "copy": {
          "name": "nodeNicCopy1",
          "count": "[variables('firstCount')]"
        },
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[concat(variables('ipbase'), '.', copyindex(variables('beginIPIndex')))]",
                "subnet": {
                  "id": "[parameters('subnet')]"
                }
              }
            }
          ],
          "loadBalancerBackendAddressPools": [
            {
              "id": "[concat(variables('ftslb'), '/backendAddressPools/ftspool')]"
            }
          ],
          "enableAcceleratedNetworking":"[if(equals(parameters('nodeType'),'worker'),false,true)]"
        }
      },
      {
        "apiVersion": "2017-06-01",
        "condition":"[not(equals(parameters('nodeType'),'fileTransfer'))]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[if(equals(parameters('nodeType'),'fileTransfer'), concat(variables('nicName'), '-', padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0')), concat(variables('nicName'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0')))]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "nodeNicCopy2",
          "count": "[variables('firstCount')]"
        },
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[concat(variables('ipbase'), '.', copyindex(variables('beginIPIndex')))]",
                "subnet": {
                  "id": "[parameters('subnet')]"
                }
              }
            }
          ],
          "enableAcceleratedNetworking":"[if(equals(parameters('nodeType'),'worker'),false,true)]"
        }
      },
      {
        "apiVersion": "2017-03-30",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(parameters('nodePrefix'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'))]"
        ],
        "copy": {
          "name": "workerVMCopy1",
          "count": "[variables('firstCount')]"
        },
        "properties": {
          "availabilitySet": {
            "id": "[variables('nodeAvSet')]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('nodeSize')]"
          },
          "osProfile": {
            "computername": "[concat(parameters('nodePrefix'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
               "id": "[parameters('OSImage')]"
             },
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": "[parameters('nodeDataDiskCount')]",
                "input": {
                  "name": "[concat(parameters('nodePrefix'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'), '-disk', copyIndex('dataDisks'))]",
                  "lun": "[copyIndex('dataDisks')]",
                  "diskSizeGB": "[parameters('nodeDataDiskSize')]",
                  "caching": "ReadOnly",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[if(equals(parameters('nodeType'),'fileTransfer'),resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), '-', padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'))),resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'))))]"
              }
            ]
          }
        }
      },
      {
        "apiVersion": "2017-03-30",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(parameters('nodePrefix'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'), '/Installation')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', parameters('nodePrefix'), padLeft(copyindex(parameters('startIndex')),variables('paddedLength'),'0'))]"
        ],
        "copy": {
          "name": "nodeExtCopy1",
          "count": "[variables('firstCount')]"
        },
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[if(equals(parameters('nodeType'),'gluster'),variables('glusterscripts'),variables('workerscripts'))]",
            "commandToExecute": "[if(equals(parameters('nodeType'),'gluster'),variables('glusterCmd'), variables('workerCmd'))]"
          }
        }
      },
      {
        "apiVersion": "2017-06-01",
        "condition": "[equals(variables('overflow'),1)]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[if(equals(variables('overflow'),1),concat(variables('nicName'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0')), concat(variables('nicName'), '--', padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0')))]",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "nodeNicCopy2",
          "count": "[variables('secondCount')]"
        },
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[concat('10.0.', variables('thirdOctet2'), '.', copyindex())]",
                "subnet": {
                  "id": "[parameters('subnet')]"
                }
              }
            }
          ],
          "enableAcceleratedNetworking":"[if(equals(parameters('nodeType'),'worker'),false,true)]"
        }
      },
      {
        "apiVersion": "2017-03-30",
        "condition": "[equals(variables('overflow'),1)]",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(parameters('nodePrefix'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0'))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[if(equals(variables('overflow'),1), concat(variables('nicName'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0')), concat(variables('nicName'), '--', padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0')))]"
        ],
        "copy": {
          "name": "nodeVMCopy2",
          "count": "[variables('secondCount')]"
        },
        "properties": {
          "availabilitySet": {
            "id": "[variables('nodeAvSet')]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('nodeSize')]"
          },
          "osProfile": {
            "computername": "[concat(parameters('nodePrefix'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0'))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
               "id": "[parameters('OSImage')]"
            },
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": "[parameters('nodeDataDiskCount')]",
                "input": {
                  "name": "[concat(parameters('nodePrefix'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0'), '-disk', copyIndex('dataDisks'))]",
                  "lun": "[copyIndex('dataDisks')]",
                  "diskSizeGB": "[parameters('nodeDataDiskSize')]",
                  "caching": "ReadOnly",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0')))]"
              }
            ]
          }
        }
      },
      {
        "apiVersion": "2017-03-30",
        "condition": "[equals(variables('overflow'),1)]",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(parameters('nodePrefix'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0'), '/Installation')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', parameters('nodePrefix'), padLeft(copyindex(variables('secondStartIndex')),variables('paddedLength'),'0'))]"
        ],
        "copy": {
          "name": "nodeExtCopy2",
          "count": "[variables('secondCount')]"
        },
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('workerscripts')]",
            "commandToExecute": "[variables('workerCmd')]"
          }
        }
      }
    ]
}
